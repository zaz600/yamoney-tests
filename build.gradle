plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id "com.energizedwork.webdriver-binaries" version "1.4"
    id 'io.qameta.allure' version '2.6.0'
}

def allureVersion = '2.9.0'
def junitVersion = '5.4.0-RC2'
def seleniumVersion = '3.141.59'
def log4jVersion = '2.11.1'
def slf4jVersion = '1.7.25'



group 'io.github.zaz600'
version '1.0-SNAPSHOT'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    testCompile("org.assertj:assertj-core:3.11.1")
    testCompile("org.seleniumhq.selenium:selenium-java:$seleniumVersion")
    testCompile("org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion")
    testCompile("io.github.bonigarcia:webdrivermanager:3.2.0")
    testCompile("io.qameta.allure:allure-java-commons:$allureVersion")
    testCompile("io.qameta.allure:allure-attachments:$allureVersion")
    testRuntimeOnly("io.qameta.allure:allure-junit5:$allureVersion")
    testCompile("io.qameta.allure:allure-generator:$allureVersion")
    testCompile("io.qameta.allure:allure-httpclient:$allureVersion")

    testRuntime group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jVersion
    testRuntime group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion
    testRuntime group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: log4jVersion
    testCompile group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4jVersion
    testCompile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion

}

test {
    useJUnitPlatform()
    dependsOn 'cleanTest'
    systemProperties['junit.jupiter.execution.parallel.enabled'] = true
    maxParallelForks = Runtime.runtime.availableProcessors() ?: 1
    forkEvery = 4
}

webdriverBinaries {
    chromedriver '2.45'
}

wrapper.gradleVersion = '5.2.1'

allure {
    autoconfigure = true
    version = '2.9.0'
    clean = true
    reportDir = file("$projectDir/build/allure-report")
    resultsDir = file("$projectDir/build/allure-results")
    downloadLinkFormat = 'https://dl.bintray.com/qameta/maven/io/qameta/allure/allure-commandline/%s/allure-commandline-%<s.zip'
}


compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

